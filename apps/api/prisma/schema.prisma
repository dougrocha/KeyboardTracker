// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username String
  email    String  @unique
  name     String?

  password String? @db.VarChar(60)

  avatar String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  theme Theme? @default(SYSTEM)

  isFavoritesPrivate Boolean @default(false)

  discord         DiscordIdentity?
  designerAccount Designer?
  formResponses   FormResponse[]
  forms           Form[]
  favorites       UserProductFavorite[]
  userVendor      UserVendor[]
}

enum Theme {
  DARK
  LIGHT
  SYSTEM
}

model DiscordIdentity {
  id String @id

  discordId     String  @unique
  username      String
  discriminator String
  email         String? @unique

  refreshToken String?
  accessToken  String?

  mfaEnabled Boolean?

  connectedAt DateTime @default(now())

  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([username, discriminator])
}

model UserProductFavorite {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String

  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model KeycapSet {
  id String @id

  profile  String?
  material String?

  images  Image[]
  product Product @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum ProductType {
  KEYCAP_SET
  SWITCH
  KEYBOARD
}

model Designer {
  id String @id

  username String

  name String?

  avatarUrl String?
  bannerUrl String?

  joinedAt DateTime @default(now())

  twitterHandle  String?
  redditUsername String?

  discordServerUrl String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  productDesigner ProductDesigner[]
}

model Image {
  id Int @id @default(autoincrement())

  title String? @db.VarChar(20)

  description String?

  imgUrl String @unique

  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?
  KeycapSet   KeycapSet? @relation(fields: [keycapSetId], references: [id])
  keycapSetId String?
  keyboard    Keyboard?  @relation(fields: [keyboardId], references: [id])
  keyboardId  String?
}

enum GroupBuyStatus {
  UPCOMING
  INTEREST_CHECK
  WAITING_GROUP_BUY
  HIDDEN
  DELAYED
  GROUP_BUY
  GROUP_BUY_ENDED
  PRODUCTION
  SHIPPING
  DELIVERED
}

model Vendor {
  id   String @id
  name String @unique

  logoUrl String?
  url     String?

  country String?

  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  productVendor ProductVendor[]
  userVendor    UserVendor[]
}

model Keyboard {
  id String @id

  angle      Int?
  mountStyle String?
  hotswap    Boolean?
  size       String?  @db.VarChar(20)

  images Image[]

  updatedAt DateTime @updatedAt()

  product Product @relation(fields: [id], references: [id])
}

model ProductVendor {
  id Int @id @default(autoincrement())

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@unique([vendorId, productId])
}

model UserVendor {
  id Int @id @default(autoincrement())

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([vendorId, userId])
}

model ProductDesigner {
  id Int @id @default(autoincrement())

  designer   Designer? @relation(fields: [designerId], references: [id])
  designerId String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@unique([productId, designerId])
}

model Product {
  id String @id

  name String

  description String?
  policy      String?
  status      GroupBuyStatus @default(HIDDEN)
  type        ProductType

  brand String?

  layout String?

  interestCheckUrl String?
  groupBuyUrl      String?

  groupBuyStartDate DateTime?
  groupBuyEndDate   DateTime?

  price Decimal?

  coverImage String?
  images     Image[]

  estimatedDeliveryQuarter YearQuarter
  estimatedDeliveryYear    String?     @db.Char(4)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  keyboard  Keyboard?
  keycapSet KeycapSet?

  form          Form?
  vendors       ProductVendor[]
  designers     ProductDesigner[]
  userFavorites UserProductFavorite[]

  @@index([name, description, type, brand, status])
}

enum YearQuarter {
  Q1
  Q2
  Q3
  Q4
}

model Form {
  id String @id

  name        String
  description String?

  fields    FormField[]
  responses FormResponse[]

  startDate DateTime?
  endDate   DateTime?

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum FieldType {
  TEXT
  BOOLEAN
  NUMBER
  TEXTAREA
  SELECT
  RADIO
}

// Each form page is a FormField
model FormField {
  id String @id @default(uuid())

  name        String
  description String?
  required    Boolean @default(false)
  position    Int

  type      FieldType
  responses FormResponse[]
  values    FieldValue[]

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([formId, position])
}

// Values for select, radio, and checkbox fields
model FieldValue {
  id String @id @default(uuid())

  position Int
  value    String

  fieldValueResponses FieldValueResponse[]

  parentField   FormField? @relation(fields: [parentFieldId], references: [id])
  parentFieldId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([parentFieldId, position])
}

model FormResponse {
  id String @id @default(uuid())

  booleanValue Boolean?
  numberValue  Int?
  textValue    String?
  radioValue   String?

  fieldValueResponses FieldValueResponse[]

  field   FormField @relation(fields: [fieldId], references: [id])
  fieldId String

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  answeredAt DateTime @default(now())

  // Must all be unique, cannot have multiple responses for the same field
  @@unique([fieldId, radioValue, userId], name: "fieldId_radioValue_userId")
  @@unique([fieldId, textValue, userId], name: "fieldId_textValue_userId")
  @@unique([fieldId, booleanValue, userId], name: "fieldId_booleanValue_userId")
  @@unique([fieldId, numberValue, userId], name: "fieldId_numberValue_userId")
}

model FieldValueResponse {
  id String @id @default(uuid())

  value      FieldValue   @relation(fields: [valueId], references: [id])
  valueId    String
  response   FormResponse @relation(fields: [responseId], references: [id])
  responseId String

  @@unique([responseId, valueId])
}
