// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username String
  email    String  @unique
  name     String?

  password String? @db.VarChar(60)

  avatar String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  discord         DiscordIdentity?
  designerAccount Designer?
  formAnswers     FormAnswer[]
  forms           Form[]
}

model DiscordIdentity {
  id String @id

  discordId     String  @unique
  username      String
  discriminator String
  email         String? @unique

  refreshToken String?
  accessToken  String?

  mfaEnabled Boolean?

  connected DateTime @default(now())

  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([username, discriminator])
}

model KeycapSet {
  id String @id

  profile  String?
  material String?

  images  Image[]
  product Product @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum ProductType {
  KEYCAP_SET
  SWITCH
  KEYBOARD
}

model Designer {
  id String @id

  username String

  name String?

  joinedAt DateTime @default(now())

  twitterHandle  String?
  redditUsername String?

  discordServerUrl String?

  user    User      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product[]
}

model Image {
  id Int @id @default(autoincrement())

  title String? @db.VarChar(20)

  description String?

  imgUrl String @unique

  product     Product?   @relation(fields: [productId], references: [id])
  productId   String?
  KeycapSet   KeycapSet? @relation(fields: [keycapSetId], references: [id])
  keycapSetId String?
  keyboard    Keyboard?  @relation(fields: [keyboardId], references: [id])
  keyboardId  String?
}

enum GroupBuyStatus {
  UPCOMING
  INTEREST_CHECK
  WAITING_GROUP_BUY
  DELAYED
  GROUP_BUY
  GROUP_BUY_ENDED
  PRODUCTION
  SHIPPING
  DELIVERED
}

model Vendor {
  id   String @id
  name String @unique

  logoUrl String?
  url     String?

  country String?

  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  productVendor ProductVendor[]
}

model Keyboard {
  id String @id

  angle      Int?
  mountStyle String?
  hotswap    Boolean?
  size       String?  @db.VarChar(20)

  updatedAt DateTime @updatedAt()

  product Product @relation(fields: [id], references: [id])
  Image   Image[]
}

model ProductVendor {
  id Int @id @default(autoincrement())

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Product {
  id String @id

  name String

  description String?
  policy      String?
  status      GroupBuyStatus @default(UPCOMING)
  type        ProductType

  brand String?

  layout String?

  interestCheckUrl String?
  groupBuyUrl      String?

  groupBuyStartDate DateTime?
  groupBuyEndDate   DateTime?

  price Decimal?

  coverImage String?
  images     Image[]

  estimatedDeliveryQuarter YearQuarter
  estimatedDeliveryYear    String?     @db.Char(4)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  keyboard  Keyboard?
  keycapSet KeycapSet?

  vendors ProductVendor[]

  designer   Designer? @relation(fields: [designerId], references: [id])
  designerId String?
  form       Form?

  @@index([name, description, type, brand, status])
}

enum YearQuarter {
  Q1
  Q2
  Q3
  Q4
}

model Form {
  id String @id @default(uuid())

  name        String
  description String?

  fields               FormField[]
  formAnswer           FormAnswer[]
  formListValueAnswers FormListValueAnswers[]

  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum FieldType {
  TEXT
  TEXTAREA
  BOOLEAN
  SELECT
  RADIO
  NUMBER
}

model FormField {
  id Int @id @default(autoincrement())

  name        String
  description String?
  required    Boolean @default(false)
  position    Int

  type                 FieldType
  formAnswer           FormAnswer[]
  formListValues       FormListValues[]
  formListValueAnswers FormListValueAnswers[]

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([formId, position])
}

model FormListValues {
  id Int @id @default(autoincrement())

  position Int
  value    String

  formListValueAnswers FormListValueAnswers[]

  formField   FormField? @relation(fields: [formFieldId], references: [id])
  formFieldId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([formFieldId, position])
}

model FormAnswer {
  id Int @id @default(autoincrement())

  booleanValue         Boolean?
  numberValue          Int?
  textValue            String?
  formListValueAnswers FormListValueAnswers[]

  formField   FormField @relation(fields: [formFieldId], references: [id])
  formFieldId Int

  form   Form   @relation(fields: [formId], references: [id])
  formId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  answeredAt DateTime @default(now())
}

model FormListValueAnswers {
  id Int @id @default(autoincrement())

  option       FormListValues @relation(fields: [optionId], references: [id])
  optionId     Int
  formAnswer   FormAnswer     @relation(fields: [formAnswerId], references: [id])
  formAnswerId Int
  form         Form?          @relation(fields: [formId], references: [id])
  formId       String?
  formField    FormField?     @relation(fields: [formFieldId], references: [id])
  formFieldId  Int?

  @@unique([formAnswerId, optionId])
}
