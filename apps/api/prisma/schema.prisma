// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username String
  email    String  @unique
  name     String?

  password String? @db.VarChar(60)

  avatar String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  role AccountType @default(USER)

  discord         DiscordIdentity?
  designerAccount Designer[]
}

enum AccountType {
  USER
  VENDOR
  DESIGNER
}

model DiscordIdentity {
  id String @id

  discordId     String  @unique
  username      String
  discriminator String
  email         String? @unique

  refreshToken String?
  accessToken  String?

  mfaEnabled Boolean?

  connected DateTime @default(now())

  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([username, discriminator])
}

model KeycapSet {
  id          String  @id
  name        String  @unique
  description String?

  type ProductType @default(KEYCAP_SET)

  brand    String?
  profile  String?
  material String?

  imageCovers CoverImage[]
  images      Image[]

  interestCheckUrl String?
  groupBuyUrl      String?

  groupBuyStartDate DateTime?
  groupBuyEndDate   DateTime?

  status  GroupBuyStatus @default(UPCOMING)
  delayed Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  keycapSetVendor KeycapSetVendor[]

  designer   Designer? @relation(fields: [designerId], references: [id])
  designerId String?
}

enum ProductType {
  KEYCAP_SET
  SWITCHES
  KEYBOARDS
}

model Designer {
  id String @id

  username String

  name String?

  joinedAt DateTime @default(now())

  twitterHandle  String?
  redditUsername String?

  discordServerUrl String?

  keycapSet KeycapSet[]
  keyboard  Keyboard[]

  user User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Image {
  id Int @id @default(autoincrement())

  title String @db.VarChar(20)

  description String?

  imgUrl String

  keycapSet   KeycapSet? @relation(fields: [keycapSetId], references: [id])
  keycapSetId String?

  keyboard   Keyboard? @relation(fields: [keyboardId], references: [id])
  keyboardId String?
}

model CoverImage {
  id Int @id @default(autoincrement())

  title String @db.VarChar(20)

  description String?

  imgUrl String

  keycapSet   KeycapSet? @relation(fields: [keycapSetId], references: [id])
  keycapSetId String?

  keyboard   Keyboard? @relation(fields: [keyboardId], references: [id])
  keyboardId String?
}

enum GroupBuyStatus {
  UPCOMING
  INTEREST_CHECK
  WAITING_GROUP_BUY
  DELAYED
  GROUP_BUY
  GROUP_BUY_ENDED
  PRODUCTION
  SHIPPING
  DELIVERED
}

model Vendor {
  id   String @id
  name String @unique

  logoUrl String?
  url     String?

  country String?

  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  keycapSetVendor KeycapSetVendor[]
  keyboardVendor  KeyboardVendor[]
}

model KeycapSetVendor {
  id Int @id @default(autoincrement())

  keycapSet   KeycapSet @relation(fields: [keycapSetId], references: [id])
  keycapSetId String

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String
}

model Keyboard {
  id   String @id
  name String @unique

  type ProductType @default(KEYBOARDS)

  description String?

  imageCovers CoverImage[]
  images      Image[]

  status GroupBuyStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  keyboardVendor KeyboardVendor[]

  designer   Designer? @relation(fields: [designerId], references: [id])
  designerId String?
}

model KeyboardVendor {
  id Int @id @default(autoincrement())

  keyboard   Keyboard @relation(fields: [keyboardId], references: [id])
  keyboardId String

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String
}
